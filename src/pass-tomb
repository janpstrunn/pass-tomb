#!/usr/bin/env bash

# Envs

PASSRC=${PASSRC:-"$HOME/.passrc"}
PASS_STORE=${PASS_STORE:-"$HOME/.pass/"}
PASS_TOMB=$(sed -n 's/^PASS_TOMB_DIR=//p' "$PASSRC")
TOMB_KEY=$(sed -n 's/^TOMB_KEY=//p' "$PASSRC")

RED="$(tput setaf 196)"
BLUE="$(tput setaf 87)"

if [[ "$PASS_STORE" != "$HOME"* ]]; then
  echo "Danger! PASS_STORE is not located within the home directory!"
  echo "PASS_STORE Location: $PASS_STORE"
  echo "Exitting!"
  exit 1
fi

function usage() {
  cat <<EOF
pass-tomb: The Crypto Undertaker for your passwords

Usage: pass-tomb [options] <command> [arguments]

Options:
  -e             Exhume buried key to unlock a tomb
  -g             Create a tomb key using GPG ID
  -h             Display this help message and exit
  -n             Enable notifications

Commands:
  dig [-g] <TOMB_KEY> <GPG-ID>
                          Create a tomb
  import <TOMB_KEY>       Move all passwords to your tomb
  help, usage             Display this message and exits
  open [-e -g] <TOMB_KEY>
                          Open a Tomb at $PASS_STORE
  version                 Display the current version number

Examples:
  pass-tomb new dig -g my.tomb.key DA54ACB7D10
                          # Creates a new tomb using a GPG key
  pass-tomb open -e -g my.tomb.key
                          # Open a tomb using a buried GPG key
  pass-tomb import my.tomb.key
                          # Imports all passwords from $PASS_STORE
                          # tou your tomb, and closes it
EOF
}

function version() {
  echo "v.1.1.1"
}

function text() {
  color=$1
  text=$2
  reset=$(tput sgr0)
  echo -e "${color}${text}${reset}"
}

function global_error() {
  error=$?
  [[ "$error" -ne 0 ]] && {
    text "$RED" "An error occurred!" >&2
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "An error occurred!" --expire-time=5000
    fi
    exit 1
  }
}

function check_tomb_key() {
  if [ -z "$TOMB_KEY" ]; then
    text "$RED" "Error: Missing TOMB_KEY!"
    text "$BLUE" "Example: pass-tomb open $HOME/.pass.tomb.key"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Tomb" "Missing TOMB_KEY!" --expire-time=5000
    fi
    exit 1
  fi
}

function password_dig() {
  local TOMB_KEY GPG_ID
  PASS_TOMB=${PASS_TOMB:-"$HOME/.pass.tomb"}
  TOMB_KEY=${1:-$TOMB_KEY}
  check_tomb_key
  tomb dig -s 10 "$PASS_TOMB"
  global_error
  if [ "$GPG_DIG" = "true" ]; then
    GPG_ID="$2"
    if [ -z "$GPG_ID" ]; then
      text "$RED" "Error: Missing GPG ID"
      if [ "$NOTIFY" = "true" ]; then
        notify-send -u critical "Pass: Error" "Missing GPG ID!" --expire-time=5000
      fi
    fi
    text "$BLUE" "Forging a tomb key using GPG ID"
    tomb forge "$TOMB_KEY" -gR "$GPG_ID"
    tomb lock "$PASS_TOMB" -k "$TOMB_KEY" -gR "$GPG_ID"
  else
    tomb forge "$TOMB_KEY"
    tomb lock "$PASS_TOMB" -k "$TOMB_KEY"
  fi
}

function tomb_import() {
  local TOMB_KEY
  TOMB_KEY=${1:-$TOMB_KEY}
  PASS_TOMB=${PASS_TOMB:-"$HOME/.pass.tomb"}
  if [ ! -d "$PASS_STORE" ]; then
    text "$RED" "Error: Missing PASS_STORE directory!"
    if [ "$NOTIFY" = "true" ]; then
      notify-send -u critical "Pass: Error" "Missing PASS_STORE directory!" --expire-time=5000
    fi
    exit 1
  fi
  check_tomb_key
  cp -r "$PASS_STORE" "$HOME/.pass.bak"
  error_check
  mv "$PASS_STORE" "$HOME/.pass-staged"
  error_check
  tomb open "$PASS_TOMB" -k "$TOMB_KEY" "$PASS_STORE"
  error_check
  mv "$HOME/.pass-staged/*" "$PASS_STORE"
  error_check
  tomb close
  text "$BLUE" "All passwords are succesfully stored in your $PASS_TOMB!"
  text "$BLUE" "A backup at $HOME/.pass.bak have been created"
}

function password_open() {
  local TOMB_KEY
  EXHUME=${EXHUME:-$(sed -n 's/^EXHUME=//p' "$PASSRC")}
  GPG_ID=${GPG_ID:-$(sed -n 's/^GPG_ID=//p' "$PASSRC")}
  TOMB_KEY=${1:-$TOMB_KEY}
  PASS_TOMB=${PASS_TOMB:-"$HOME/.pass.tomb"}
  NOTIFY=${NOTIFY:-$(sed -n 's/^NOTIFY=//p' "$PASSRC")}
  check_tomb_key
  if [ "$EXHUME" = "true" ]; then
    secret_key=$(tomb exhume "$TOMB_KEY")
    if [ "$GPG_ID" = "true" ]; then
      tomb open "$PASS_TOMB" -k - "$PASS_STORE" -g <<<"$secret_key"
    else
      tomb open "$PASS_TOMB" -k - "$PASS_STORE" <<<"$secret_key"
    fi
  else
    if [ "$GPG_ID" = "true" ]; then
      tomb open "$PASS_TOMB" -k "$TOMB_KEY" "$PASS_STORE" -g
    else
      tomb open "$PASS_TOMB" -k "$TOMB_KEY" "$PASS_STORE"
    fi
  fi
  if [ "$NOTIFY" = "true" ]; then
    notify-send -u normal "Pass: Tomb" "Your tomb is open at \$PASS_STORE" --expire-time=3500
  fi
}

while getopts ":hvgen" opt; do
  case "$opt" in
  h)
    usage
    exit 0
    ;;
  v)
    version
    exit 0
    ;;
  e)
    EXHUME=true
    ;;
  n)
    NOTIFY=true
    ;;
  g)
    GPG_DIG=true
    ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    usage
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
help | usage)
  usage
  exit 0
  ;;
import)
  shift
  tomb_import "$1"
  exit 0
  ;;
dig)
  shift
  password_dig "$1"
  exit 0
  ;;
version)
  version
  exit 0
  ;;
open)
  shift
  password_open "$1" "$2"
  exit 0
  ;;
*)
  text "$RED" "Error: Invalid command $1" >&2
  usage
  exit 0
  ;;
esac
